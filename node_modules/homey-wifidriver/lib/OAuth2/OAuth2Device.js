'use strict';

const WifiDevice = require('./../WifiDevice');

/**
 * The OAuth2Device class exposes the getOAuth2Account method.
 * @extends WifiDevice
 * @example
 *
 * const OAuth2Device = require('homey-wifidriver').OAuth2Device;

 * const backOffStrategy = {
 *  initialDelay: 10000, // 10 seconds
 *  maxDelay: 1000 * 60 * 60, // 1 hour
 *  maxTries: 10, // Optional, max backoff tries, if not provided it will not end until reset
 *  onBackOffReady: (() => {}), // Optional, if provided this method will be called on each backoff, else it will default to this.onInit()
 *  onBackOffFailed: (() => {}), // Optional, this method will be called when backoff failed; maxTries was exceeded
 * }
 *
 * class myDevice extends OAuth2Device { // Which extends WifiDevice
 *
 *  onInit() {
 *      super.onInit({backOffStrategy});
 *
 *      // Create API client with OAuth2Account
 *      this.exampleApiClient = new ExampleAPI({
 *          oauth2Account: this.getOAuth2Account(), // OAuth2Account instance that handles fetching and refreshing access tokens
 *      })
 *      .on('initialization_failed', () => {
 *          this.nextBackoff()
 *      })
 *      .on('initialization_success', () => {
 *          this.resetBackOff();
 *      });
 *
 *      // Method that will create an interval
 *      this.registerPollInterval({
 *          id: 'status',
 *          fn: this.exampleApiClient.getStatus.bind(this.exampleApiClient),
 *          interval: 30000,
 *      });
 *
 *      // To stop polling
 *      this.deregisterPollInterval('status');
 *  }
 *
 *  onDeleted() {
 *      // Clean up registered polling intervals
 *      super.onDeleted();
 *  }
 * }
 */
class OAuth2Device extends WifiDevice {

	/**
	 * This method will return a {@link OAuth2Account} if present, otherwise it will create it based on
	 * objects from the device store; either temporary or permanent {@link OAuth2Account} objects.
	 * @returns {OAuth2Account} {@link OAuth2Account} belonging to this device
	 */
	getOAuth2Account() {
		if (this.oauth2Account) return this.oauth2Account;

		// Get temporary OAuth2 account from store if device was just added, else use the permanently added OAuth2 account
		const storedOAuth2Account = this.getStoreValue('tempOAuth2Account') || this.getStoreValue('oauth2Account');
		this.oauth2Account = this.getDriver().oauth2Client.createAccount(storedOAuth2Account);

		// Store OAuth2 account permanently for this device
		this.setStoreValue('oauth2Account', this.oauth2Account);

		// Remove temporary OAuth2 account
		this.unsetStoreValue('tempOAuth2Account');

		return this.oauth2Account;
	}
}

module.exports = OAuth2Device;
