'use strict';

const OAuth2Client = require('./OAuth2Client');

class OAuth2ClientManager {

	/**
	 * Construct an OAuth2ClientManager, which handles creating and getting OAuth2Clients
	 * @param {Object} [options]
	 * @param {boolean} [options.allowMultipleClients=true] - Enable multiple OAuth2 clients
	 */
	constructor(options = {}) {
		this._clients = [];
		this.allowMultipleClients = (options.hasOwnProperty('allowMultipleClients')) ? options.allowMultipleClients : true;
		this._log = options.log || console.log;

		// Hijack log method
		this.log = (...args) => {
			args.unshift('[OAuth2ClientManager]');
			this._log.apply(null, args);
		};

		this.log('new OAuth2ClientManager constructed');
	}

	/**
	 * Method that will return the client asked for, or the only one present in this manager.
	 * @param [clientId]
	 * @returns {OAuth2Client|Error}
	 */
	getClient(clientId) {

		// Immediately return if only one client is available
		if (this._clients.length === 1) return this._clients[0];

		// If there are more clients, search for the right one based on id
		if (this._clients.length > 1) {
			if (clientId) {
				const foundClient = this._clients.find(client => client.id === clientId);
				if (foundClient) return foundClient;
				return new Error('multiple_clients_not_supported');
			}
			return new Error('missing_client_id');
		}
		return new Error('client_not_found');
	}

	/**
	 * Factory method that will create a OAuth2Client.
	 * @param {Object} options
	 * @param {string} [options.id] - OAuth2 client identifier, or auto-generated uuid
	 * @param {string} options.url - OAuth2 authorization url
	 * @param {string} options.tokenEndpoint - OAuth2 token endpoint
	 * @param {string} options.key - OAuth2 client key
	 * @param {string} options.secret - OAuth2 client secret
	 * @param {string} [options.refreshingEnabled = true] - OAuth2 refresh grant enabled
	 * @param {string} options.allowMultipleAccounts - Specifies whether multiple accounts per client are allowed
	 * @returns {OAuth2Client|Error}
	 */
	createClient(options) {
		options.log = this._log;
		this.log(`create new OAuth2Client (id: ${options.id})`);
		return this._addClient(new OAuth2Client(options));
	}

	/**
	 * This private method will add a new OAuth2Client, or return an existing one
	 * if it was already added.
	 * @param {OAuth2Client} client - OAuth2Client instance to add
	 * @returns {OAuth2Client|Error}
	 * @private
	 */
	_addClient(client) {
		if (!(client instanceof OAuth2Client)) return new TypeError('client_is_not_instanceof_OAuth2Client');
		if (!this.allowMultipleClients && this._clients.length > 0) return new Error('only_one_client_allowed');
		if (this._clients.length > 0) {

			// Check if client was already added
			const foundClient = this.getClient(client.id);

			// Client was already added, return known client and do not add new one
			if (foundClient instanceof OAuth2Client) {
				this.log(`OAuth2Client was already added, return existing instance (id: ${client.id})`);
				return foundClient;
			}

			// Client was not yet added check if more are allowed
			if (!this.allowMultipleClients) return new Error('only_one_client_allowed');
		}
		this.log(`new OAuth2Client was added (number of clients: ${this._clients.length + 1})`);
		this._clients.push(client);
		return client;
	}
}

module.exports = OAuth2ClientManager;
