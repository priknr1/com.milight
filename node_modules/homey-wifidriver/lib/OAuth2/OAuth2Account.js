'use strict';

const Homey = require('homey');
const _ = require('underscore');
const uuid = require('uuid/v4');
const EventEmitter = require('events');
const request = require('request-promise-native');

class OAuth2Account extends EventEmitter {

	/**
	 * Construct a OAuth2Account instance, that will handle fetching and refreshing access tokens.
	 * @param {Object} options
	 * @param {string} [options.id] - OAuth2 account identifier, or auto-generated uuid
	 * @param {OAuth2Client} [options.oauth2Client] - OAuth2Client associated with this OAuth2Account
	 * @param {string} [options.refreshingEnabled = true] - OAuth2 refresh grant enabled
	 * @param {string} [options.refreshToken] - OAuth2 refresh token
	 * @param {string} [options.accessToken] - OAuth2 access token
	 */
	constructor(options = {}) {
		super();

		this.id = options.id || uuid();

		// Fix circular references
		this.oauth2Client = _.pick(options.oauth2Client, 'oauth2Url', 'tokenEndpoint',
			'key', 'secret', 'refreshingEnabled', 'allowMultipleAccounts');
		this.refreshingEnabled = (options.hasOwnProperty('refreshingEnabled')) ? options.refreshingEnabled : true;
		this._log = options.log || console.log;

		// Store tokens for later retrieval
		if (options.accessToken) Homey.ManagerSettings.set(`oauth2_${this.id}_accessToken`, options.accessToken);
		if (this.refreshingEnabled && options.refreshToken) {
			Homey.ManagerSettings.set(`oauth2_${this.id}_refreshToken`, options.refreshToken);
		}

		// Get access tokens from store or options object
		this._accessToken = Homey.ManagerSettings.get(`oauth2_${this.id}_accessToken`) || options.accessToken;
		if (this.refreshingEnabled) {
			this._refreshToken = Homey.ManagerSettings.get(`oauth2_${this.id}_refreshToken`) || options.refreshToken;
		}

		// Hijack log method
		this.log = (...args) => {
			args.unshift('[OAuth2Account]');
			this._log.apply(null, args);
		};

		this.log(`new OAuth2Account constructed (id: ${this.id})`);
	}

	/**
	 * Method that returns the OAuth2Url belonging to this OAuth2Account.
	 * @returns {string}
	 */
	getOAuth2Url() {
		return this.oauth2Client.oauth2Url;
	}

	/**
	 * Method that will clean up event listeners and unsets storage settings.
	 */
	destroy() {
		if (this.refreshTokensTimeout) clearTimeout(this.refreshTokensTimeout);
		Homey.ManagerSettings.unset(`oauth2_${this.id}_accessToken`);
		Homey.ManagerSettings.unset(`oauth2_${this.id}_refreshToken`);
		this.removeAllListeners();
		this.log(`OAuth2Account destroyed (id: ${this.id})`);
	}

	/**
	 * Getter for accessToken.
	 * @returns {string}
	 */
	get accessToken() {
		return this._accessToken;
	}

	/**
	 * Setter for accessToken, also stores it in persistent storage.
	 * @param {string} accessToken - new access token
	 */
	set accessToken(accessToken) {
		Homey.ManagerSettings.set(`oauth2_${this.id}_accessToken`, accessToken);
		this._accessToken = accessToken;
	}

	/**
	 * Getter for refreshToken.
	 * @returns {string}
	 */
	get refreshToken() {
		return this._refreshToken;
	}

	/**
	 * Setter for refreshToken, also stores it in persistent storage.
	 * @param {string} refreshToken - new refresh token
	 */
	set refreshToken(refreshToken) {
		if (this.refreshingEnabled) {
			Homey.ManagerSettings.set(`oauth2_${this.id}_refreshToken`, refreshToken);
			this._refreshToken = refreshToken;
		} else return new Error('refresh_token_grant_disabled');
	}

	/**
	 * Method that performs a request to retrieve access tokens.
	 * @param {string} code - OAuth2 code
	 * @returns {Promise}
	 */
	getAccessTokens(code) {
		this.log(`get access tokens (code: ${code}, id: ${this.id})`);
		return new Promise((resolve, reject) => {
			request({
				url: this.oauth2Client.tokenEndpoint,
				method: 'POST',
				json: true,
				form: {
					grant_type: 'authorization_code',
					client_id: this.oauth2Client.key,
					client_secret: this.oauth2Client.secret,
					redirect_uri: 'https://callback.athom.com/oauth2/callback/',
					code,
				},
			})
				.then(body => this._processNewAccessTokens(body, resolve, reject))
				.catch(err => {
					this.log(`failed to fetch access tokens (id: ${this.id})`, err);
					return reject(err);
				});
		});
	}

	/**
	 * Method that sets a timeout for the next refresh of tokens.
	 * @param {number} timeout - refresh timeout (ms)
	 */
	setRefreshTokenTimeout(timeout) {
		this.log(`set refresh token timeout for ${timeout / 1000} seconds (id: ${this.id})`);
		// Set refresh access token timeout
		if (this.refreshTokensTimeout) clearTimeout(this.refreshTokensTimeout);
		this.refreshTokensTimeout = setTimeout(() => {
			this.refreshAccessTokens();
		}, timeout);
	}

	/**
	 * Method that performs a request that will refresh the access tokens.
	 * @returns {Promise}
	 */
	refreshAccessTokens() {
		this.log(`refresh access tokens (id: ${this.id})`);
		return new Promise((resolve, reject) => {

			if (!this.refreshToken) return reject(new Error('missing_refresh_token'));

			request({
				url: this.oauth2Client.tokenEndpoint,
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
				},
				json: true,
				form: {
					client_secret: this.oauth2Client.secret,
					client_id: this.oauth2Client.key,
					grant_type: 'refresh_token',
					refresh_token: this.refreshToken,
				},
			})
				.then(body => this._processNewAccessTokens(body, resolve, reject))
				.catch(err => {
					this.log(`failed to refresh access tokens (id: ${this.id})`, err);
					return reject(err);
				});
		});
	}

	/**
	 * Method that searches the body for new access tokens, and sets a timeout to refresh the tokens
	 * in time. It emits 'tokens' to update listeners of the new tokens.
	 * @param body
	 * @param resolve
	 * @param reject
	 * @returns {Promise|Error}ºª
	 * @private
	 */
	_processNewAccessTokens(body, resolve, reject) {

		// Check for invalid body
		if (!body || !body.hasOwnProperty('access_token') ||
			(this.refreshingEnabled && !body.hasOwnProperty('refresh_token'))) {
			this.log(`error processing new access tokens (id: ${this.id})`, body);
			return reject(new Error('invalid_tokens_object_received'));
		}

		this.log(`fetched new access tokens (id: ${this.id})`);

		// Store new tokens
		this.accessToken = body.access_token;

		// Construct tokens object
		const tokens = {
			accessToken: this.accessToken,
		};

		// If refreshing is possible
		if (this.refreshingEnabled) {
			this.refreshToken = body.refresh_token;
			tokens.refreshToken = body.refresh_token;
			this.setRefreshTokenTimeout((body.expires_in - 60) * 1000);
		}


		// Emit refreshed event
		this.emit('tokens', tokens);

		// Resolve new tokens
		return resolve(tokens);
	}
}

module.exports = OAuth2Account;
