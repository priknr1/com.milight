'use strict';

const events = require('events');

class Device extends events.EventEmitter {

	/**
	 * Device constructor, takes a deviceData object
	 * and an options object.
	 * @param deviceData
	 * @param options
	 * @returns {Error} - 'missing_device_data' if no deviceData is provided
	 */
	constructor(deviceData, options) {
		if (!deviceData) return new Error('missing_device_data');
		super();

		this.data = deviceData;
		this.settings = {};
		this.capabilities = {};
		this.pollingIntervals = {};
		this.initializationRetryCount = 0;

		// Override default options
		this.options = Object.assign({
			settings: [],
			capabilities: []
		}, options);

		// Create getters and setters for all the device settings
		this.options.settings.forEach(setting => {
			this.settings[setting.id] = {
				get: () => {
					return this.settings[setting.id].value;
				},
				set: value => {
					if (typeof this.settings[setting.id].value !== 'undefined' && this.settings[setting.id].value !== value) {
						this.emit(`setting_${setting.id}_changed`, value);
					}
					this.settings[setting.id].value = value;
				},
				value: setting.value
			}
		});

		// Create getters and setters for each capability of the device
		this.options.capabilities.forEach(capability => {
			this.capabilities[capability] = {
				get: () => {
					return this.capabilities[capability].state;
				},
				set: value => {
					if (typeof this.capabilities[capability].state !== 'undefined' && this.capabilities[capability].state !== value) {
						this.emit(`${capability}_changed`, value);
					}
					this.capabilities[capability].state = value;
				},
				state: undefined
			}
		});
	}

	/**
	 * Calculate how on what interval to retry
	 * the device initialization.npm install -g mocha
	 * @returns {number}
	 * @private
	 */
	getInitializationRetryInterval() {
		this.initializationRetryCount++;
		if (this.initializationRetryCount <= 3) return 15000; // 15 seconds
		else if (this.initializationRetryCount <= 7) return 60000; // 1 minute
		else if (this.initializationRetryCount >= 8) return 15 * 60000; // 15 minutes
	}

	markAsUnavailable() {
		this.emit('unavailable');
	}

	/**
	 * Destroys an device, removes the polling
	 * intervals and event listeners.
	 */
	destroy() {
		for (const i in this.pollingIntervals) {
			if (this.pollingIntervals.hasOwnProperty(i)) {
				clearInterval(this.pollingIntervals[i]);
				delete this.pollingIntervals[i];
			}
		}
		this.removeAllListeners();
	}
}

module.exports = Device;