'use strict';

const chai = require('chai');
const Device = require('./../lib/Device');
const BasicDriver = require('./../lib/BasicDriver');


const assert = chai.assert;
const expect = chai.expect;
const should = chai.should;

const deviceDataMock = { id: 'a23sd4f5g67h8j9k' };
const optionsMock = {
	capabilities: ['onoff', 'target_temperature', 'thermostat_mode'],
};

describe('BasicDriver', () => {
	describe('Initialization', () => {
		it('should not initialize without a driverId')
		it('should initialize without options')
		it('should initialize with options');
		it('should initialize with default driver functions')
	});
	describe('Device list', () => {
		it('should initialize with an empty device list')
		it('should be able to add a device to the list')
		it('should be able to remove a device from the list')
		it('should be able to retrieve a device from the list')

		describe('Custom list', () => {
			it('should be able to add a device to a custom list')
			it('should be able to remove a device from a custom list')
			it('should be able to retrieve a device from a custom list')
		})

	});
	describe('Capabilities', () => {
		it('should throw an error for missing capability options');
		it('should create default get functions for all capabilities in driver manifest');
		it('should create custom get functions for all capabilities in driver manifest');
		it('should create default set functions for all capabilities in driver manifest');
		it('should create custom set functions for all capabilities in driver manifest');
		it('should handle successful capability gets')
		it('should handle failed capability gets')
		it('should handle successful capability sets')
		it('should handle failed capability sets')
	});

	describe('Driver initialization', () => {
		describe('Device initialization', () => {
			it('should throw an error when missing device data')
			it('should set a device unavailable while initializing');
			it('should bind capability_changed events on devices');
			it('should fire the custom initDevice function')
			it('should start retrying when initDevice fails')
			it('should create capability pollers')
			it('should setup persistent capability values')
			it('should set a device as available when initialized')
		});
		it('should initialize multiple devices')
		it('should fail to initialize when an error occurs')
	})

	describe('Device functionality', () => {
		it('should have functioning pollIntervals on capabilities')
		it('should persist capability values before unload')
		it('should be re-initialized when it becomes unavailable');

	})

});